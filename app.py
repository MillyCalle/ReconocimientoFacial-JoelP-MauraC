import streamlit as st
from PIL import Image, ImageOps
import numpy as np
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import io
import os
import zipfile
from datetime import datetime

# Importar TensorFlow con manejo de errores
try:
    import tensorflow as tf
    from tensorflow import keras
    TF_AVAILABLE = True
except ImportError:
    TF_AVAILABLE = False

# ---------------------------
# CONFIGURACI√ìN
# ---------------------------
DB_PATH = "predictions.db"
MODEL_PATH = "model/keras_model.h5"
LABELS_PATH = "model/labels.txt"
IMAGE_SIZE = (224, 224)

# ---------------------------
# PAGE CONFIG
# ---------------------------
st.set_page_config(
    page_title="Sistema de Reconocimiento Facial",
    layout="wide",
    page_icon="üéØ",
    initial_sidebar_state="expanded"
)

# Estilos CSS mejorados
st.markdown("""
<style>
    /* Sidebar personalizado */
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #1e3c72 0%, #2a5298 100%);
    }
    
    [data-testid="stSidebar"] * {
        color: white !important;
    }
    
    /* Fondo principal con gradiente sutil */
    .stApp {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    
    /* T√≠tulos personalizados */
    h1 {
        color: #1e3c72;
        font-weight: 800;
        text-align: center;
        padding: 20px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    h2, h3 {
        color: #2c3e50;
        font-weight: 700;
    }
    
    /* Tarjetas con sombra */
    .css-1r6slb0 {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    /* Botones mejorados */
    .stButton>button {
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    /* M√©tricas personalizadas */
    [data-testid="stMetricValue"] {
        font-size: 32px;
        font-weight: bold;
        color: #667eea;
    }
    
    /* Footer personalizado */
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        text-align: center;
        padding: 15px;
        font-size: 14px;
        box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
        z-index: 999;
    }
    
    /* Tarjetas de informaci√≥n */
    .info-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 10px 0;
        border-left: 5px solid #667eea;
    }
    
    /* Etiquetas grandes */
    .big-label {
        font-size: 36px !important;
        font-weight: 800;
        color: #667eea;
        text-align: center;
        padding: 20px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    /* Progress bar personalizado */
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Tabs mejorados */
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
        background-color: white;
        border-radius: 10px;
        padding: 10px;
    }
    
    .stTabs [data-baseweb="tab"] {
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 600;
    }
    
    /* Expander personalizado */
    .streamlit-expanderHeader {
        background-color: white;
        border-radius: 10px;
        font-weight: 600;
    }
</style>
""", unsafe_allow_html=True)

# ---------------------------
# DATABASE
# ---------------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS people (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            label TEXT UNIQUE,
            name TEXT,
            email TEXT,
            role TEXT,
            threshold REAL DEFAULT 0.5,
            notes TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS predictions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            source TEXT,
            filename TEXT,
            label TEXT,
            confidence REAL
        )
    ''')
    conn.commit()
    conn.close()

def insert_prediction(timestamp, source, filename, label, confidence):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('INSERT INTO predictions (timestamp, source, filename, label, confidence) VALUES (?,?,?,?,?)',
              (timestamp, source, filename, label, float(confidence)))
    conn.commit()
    conn.close()

# ---------------------------
# CARGA DE MODELO
# ---------------------------
@st.cache_resource
def load_tm_model(model_path, labels_path):
    """Carga el modelo de Teachable Machine con manejo correcto de versiones"""
    model = keras.models.load_model(
        model_path, 
        compile=False,
        custom_objects=None
    )
    
    if os.path.exists(labels_path):
        with open(labels_path, "r", encoding="utf-8") as f:
            labels = [line.strip() for line in f.readlines()]
    else:
        labels = [f"Clase_{i}" for i in range(model.output_shape[-1])]
    
    return model, labels

def preprocess_image(image: Image.Image, target_size=IMAGE_SIZE):
    """Preprocesa la imagen para Teachable Machine"""
    img = image.convert('RGB')
    img = ImageOps.fit(img, target_size, Image.Resampling.LANCZOS)
    img_array = np.asarray(img, dtype=np.float32)
    normalized = (img_array / 127.5) - 1
    return np.expand_dims(normalized, axis=0)

# ---------------------------
# FUNCI√ìN DE PREDICCI√ìN
# ---------------------------
def predict_and_display(image, source_name, filename):
    """Funci√≥n reutilizable para hacer predicciones y mostrar resultados"""
    try:
        with st.spinner("üîÑ Analizando imagen con IA..."):
            # Preprocesar imagen
            processed = preprocess_image(image, IMAGE_SIZE)
            
            # Hacer predicci√≥n
            predictions = model.predict(processed, verbose=0)[0]
            
            # Obtener resultado principal
            top_idx = int(np.argmax(predictions))
            top_label = labels[top_idx]
            top_conf = float(predictions[top_idx])
            
            # Contenedor principal con dise√±o mejorado
            st.markdown("<div class='info-card'>", unsafe_allow_html=True)
            
            # Mostrar resultado principal
            st.markdown("### üéØ Identificaci√≥n Detectada")
            st.markdown(f"<div class='big-label'>üë§ {top_label}</div>", unsafe_allow_html=True)
            
            # Barra de confianza con color din√°mico
            st.progress(top_conf)
            
            # Color seg√∫n confianza
            if top_conf >= 0.8:
                conf_color = "üü¢"
            elif top_conf >= 0.5:
                conf_color = "üü°"
            else:
                conf_color = "üî¥"
            
            st.markdown(f"### {conf_color} Nivel de Confianza: **{top_conf:.1%}**")
            
            # Buscar informaci√≥n de la persona
            conn = sqlite3.connect(DB_PATH)
            df_people = pd.read_sql_query('SELECT * FROM people', conn)
            conn.close()
            
            threshold = 0.5
            person_info = df_people[df_people['label'] == top_label]
            
            if not person_info.empty:
                person = person_info.iloc[0]
                threshold = float(person['threshold'])
                
                st.markdown("---")
                st.markdown("#### üìã Informaci√≥n de la Persona")
                
                col_a, col_b = st.columns(2)
                with col_a:
                    st.markdown(f"""
                    **üë§ Nombre:** {person['name']}  
                    **üíº Rol:** {person['role']}  
                    """)
                with col_b:
                    st.markdown(f"""
                    **üìß Email:** {person['email']}  
                    **üìä Umbral:** {threshold:.0%}
                    """)
                
                if top_conf >= threshold:
                    st.success(f"‚úÖ **Persona reconocida correctamente** (Confianza: {top_conf:.1%} ‚â• {threshold:.0%})")
                else:
                    st.warning(f"‚ö†Ô∏è **Confianza por debajo del umbral** ({top_conf:.1%} < {threshold:.0%})")
                
                if person['notes']:
                    st.info(f"üìù **Notas:** {person['notes']}")
            else:
                if top_conf >= threshold:
                    st.success(f"‚úÖ Reconocido como: **{top_label}** (Confianza: {top_conf:.1%})")
                else:
                    st.warning(f"‚ö†Ô∏è Confianza baja: {top_conf:.1%} (Umbral: {threshold:.0%})")
                st.info("‚ÑπÔ∏è Esta persona no est√° registrada. Ve a **'üë• Administraci√≥n'** para a√±adirla.")
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Mostrar top 3 predicciones en expander
            with st.expander("üìä Ver Top 3 Predicciones Detalladas"):
                top3_indices = np.argsort(predictions)[-3:][::-1]
                
                for i, idx in enumerate(top3_indices, 1):
                    label_name = labels[idx]
                    conf = predictions[idx]
                    
                    col1, col2, col3 = st.columns([1, 3, 1])
                    with col1:
                        st.markdown(f"**#{i}**")
                    with col2:
                        st.markdown(f"**{label_name}**")
                    with col3:
                        st.markdown(f"**{conf:.1%}**")
                    st.progress(float(conf))
                    st.markdown("")
            
            # Bot√≥n para guardar con dise√±o mejorado
            st.markdown("---")
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("üíæ Guardar Predicci√≥n en Base de Datos", 
                           type="primary", 
                           use_container_width=True,
                           key=f"save_{source_name}_{datetime.now().timestamp()}"):
                    timestamp = datetime.now().isoformat()
                    
                    insert_prediction(
                        timestamp=timestamp,
                        source=source_name,
                        filename=filename,
                        label=top_label,
                        confidence=top_conf
                    )
                    
                    st.success("‚úÖ ¬°Predicci√≥n guardada exitosamente en la base de datos!")
                    st.balloons()
                    
    except Exception as e:
        st.error(f"‚ùå Error al procesar la imagen: {str(e)}")
        with st.expander("üîç Ver detalles del error"):
            st.code(str(e), language="text")

# ---------------------------
# INICIALIZACI√ìN
# ---------------------------
init_db()

# Cargar modelo
model = None
labels = []

if not TF_AVAILABLE:
    st.sidebar.error("‚ùå TensorFlow no est√° instalado")
    st.sidebar.code("pip install tensorflow==2.12.0", language="bash")
elif not os.path.exists(MODEL_PATH):
    st.sidebar.warning("‚ö†Ô∏è No se encontr√≥ el archivo del modelo")
    st.sidebar.info(f"üìÅ Ruta esperada: `{MODEL_PATH}`")
else:
    try:
        with st.spinner("üîÑ Cargando modelo de IA..."):
            model, labels = load_tm_model(MODEL_PATH, LABELS_PATH)
        st.sidebar.success("‚úÖ Modelo cargado correctamente")
        st.sidebar.metric("üìä Clases Disponibles", len(labels))
        
        with st.sidebar.expander("üîç Ver clases del modelo"):
            for i, label in enumerate(labels):
                st.write(f"**{i+1}.** {label}")
    except Exception as e:
        st.sidebar.error(f"‚ö†Ô∏è Error al cargar el modelo")
        with st.sidebar.expander("üîç Ver detalles"):
            st.code(str(e), language="text")
        st.sidebar.info("üí° Soluci√≥n:")
        st.sidebar.code("pip uninstall tensorflow\npip install tensorflow==2.12.0", language="bash")

# ---------------------------
# HEADER PRINCIPAL
# ---------------------------
st.markdown("<h1>üéØ Sistema de Reconocimiento Facial Inteligente</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: #666; font-size: 18px; margin-bottom: 30px;'>Tecnolog√≠a de Machine Learning para identificaci√≥n de personas en tiempo real</p>", unsafe_allow_html=True)

# ---------------------------
# NAVEGACI√ìN
# ---------------------------
page = st.sidebar.radio(
    "üìÇ Men√∫ de Navegaci√≥n", 
    ["üé• Reconocimiento en Vivo", "üë• Administraci√≥n de Personas", "üìä Dashboard Anal√≠tico", "üì• Exportaci√≥n de Datos"],
    label_visibility="visible"
)

st.sidebar.markdown("---")

# ---------------------------
# P√ÅGINA: RECONOCIMIENTO EN VIVO
# ---------------------------
if page == "üé• Reconocimiento en Vivo":
    st.header("üé• Captura y Reconocimiento en Tiempo Real")
    
    if model is None:
        st.error("‚ùå El modelo no est√° cargado. Revisa la barra lateral para m√°s informaci√≥n.")
        st.info("üìù **Pasos para solucionar:**")
        st.markdown("""
        1. Verifica que exista la carpeta `model/` con:
           - `keras_model.h5`
           - `labels.txt`
        2. Instala TensorFlow: `pip install tensorflow==2.12.0`
        3. Reinicia la aplicaci√≥n
        """)
    else:
        # Tabs para diferentes fuentes
        tab1, tab2 = st.tabs(["üì∏ C√°mara en Vivo", "üìÅ Subir Imagen"])
        
        # TAB 1: C√ÅMARA
        with tab1:
            st.markdown("### üì∏ Captura desde la C√°mara")
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                with st.expander("‚ÑπÔ∏è Instrucciones de Uso", expanded=False):
                    st.markdown("""
                    1. **Autoriza** el acceso a tu c√°mara
                    2. **Posici√≥nate** frente a la c√°mara
                    3. **Asegura** buena iluminaci√≥n
                    4. **Haz clic** en "Take Photo"
                    5. **Revisa** el resultado a la derecha
                    """)
                
                camera_photo = st.camera_input("üé• Activa tu c√°mara y captura")
                
                if camera_photo is not None:
                    image = Image.open(camera_photo)
                    st.image(image, caption="‚úÖ Imagen capturada correctamente", use_container_width=True)
            
            with col2:
                if camera_photo is None:
                    st.info("üëà Captura una foto con la c√°mara para comenzar el an√°lisis")
                    st.image("https://via.placeholder.com/400x300/667eea/ffffff?text=Esperando+Captura", use_container_width=True)
                else:
                    image = Image.open(camera_photo)
                    filename = f"cam_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
                    predict_and_display(image, "camera_live", filename)
        
        # TAB 2: SUBIR ARCHIVO
        with tab2:
            st.markdown("### üìÅ Cargar Imagen desde Archivo")
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                with st.expander("‚ÑπÔ∏è Formatos Aceptados", expanded=False):
                    st.markdown("""
                    - ‚úÖ **JPG / JPEG**
                    - ‚úÖ **PNG**
                    - üìè Tama√±o recomendado: M√≠nimo 224x224 px
                    - üí° Mejor iluminaci√≥n = Mejor precisi√≥n
                    """)
                
                uploaded_file = st.file_uploader(
                    "Arrastra o selecciona una imagen", 
                    type=['jpg', 'jpeg', 'png'],
                    help="Sube una foto clara del rostro"
                )
                
                if uploaded_file is not None:
                    image = Image.open(uploaded_file)
                    st.image(image, caption=f"‚úÖ Archivo cargado: {uploaded_file.name}", use_container_width=True)
            
            with col2:
                if uploaded_file is None:
                    st.info("üëà Sube una imagen para iniciar el reconocimiento")
                    st.image("https://via.placeholder.com/400x300/764ba2/ffffff?text=Subir+Imagen", use_container_width=True)
                else:
                    image = Image.open(uploaded_file)
                    predict_and_display(image, "uploaded_file", uploaded_file.name)

# ---------------------------
# P√ÅGINA: ADMINISTRACI√ìN
# ---------------------------
elif page == "üë• Administraci√≥n de Personas":
    st.header("üë• Gesti√≥n de Personas Registradas")
    
    conn = sqlite3.connect(DB_PATH)
    df_people = pd.read_sql_query('SELECT * FROM people', conn)
    conn.close()

    # M√©tricas con dise√±o mejorado
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üë§ Total Personas", len(df_people), delta=None)
    with col2:
        st.metric("üè∑Ô∏è Etiquetas √önicas", df_people['label'].nunique() if not df_people.empty else 0)
    with col3:
        avg_th = df_people['threshold'].mean() if not df_people.empty else 0.5
        st.metric("üìä Umbral Promedio", f"{avg_th:.2f}")
    with col4:
        active = len(df_people[df_people['threshold'] >= 0.5]) if not df_people.empty else 0
        st.metric("‚úÖ Activos", active)

    st.markdown("---")
    
    # Tabs para organizar mejor
    tab1, tab2, tab3 = st.tabs(["üìã Lista de Personas", "‚ûï Registrar Nueva", "üóëÔ∏è Eliminar Persona"])
    
    # TAB 1: LISTADO
    with tab1:
        st.subheader("üìã Personas Registradas en el Sistema")
        if df_people.empty:
            st.info("üì≠ No hay personas registradas. Ve a la pesta√±a **'‚ûï Registrar Nueva'** para a√±adir.")
        else:
            # Formatear dataframe
            df_display = df_people.copy()
            df_display['threshold'] = df_display['threshold'].apply(lambda x: f"{x:.0%}")
            
            st.dataframe(
                df_display,
                use_container_width=True,
                height=400,
                column_config={
                    "id": "ID",
                    "label": st.column_config.TextColumn("Etiqueta", width="medium"),
                    "name": st.column_config.TextColumn("Nombre", width="large"),
                    "email": "Email",
                    "role": "Rol",
                    "threshold": "Umbral",
                    "notes": "Notas"
                }
            )
    
    # TAB 2: CREAR/EDITAR
    with tab2:
        st.subheader("‚ûï Registrar Nueva Persona")
        
        with st.form("person_form", clear_on_submit=True):
            st.markdown("**üìù Informaci√≥n B√°sica:**")
            col1, col2 = st.columns(2)
            
            with col1:
                label = st.text_input(
                    "üè∑Ô∏è Etiqueta del Modelo *", 
                    placeholder="Ej: 0 Joel Pesantez",
                    help="Debe coincidir EXACTAMENTE con una clase de Teachable Machine"
                )
                name = st.text_input(
                    "üë§ Nombre Completo *",
                    placeholder="Ej: Joel Pesantez"
                )
                email = st.text_input(
                    "üìß Correo Electr√≥nico",
                    placeholder="ejemplo@email.com"
                )
            
            with col2:
                role = st.text_input(
                    "üíº Rol / Cargo",
                    placeholder="Ej: Estudiante"
                )
                threshold = st.slider(
                    "üìä Umbral de Confianza", 
                    0.0, 1.0, 0.5, 0.05,
                    help="Confianza m√≠nima requerida (50% recomendado)"
                )
                notes = st.text_area(
                    "üìù Notas Adicionales",
                    placeholder="Informaci√≥n relevante..."
                )
            
            st.markdown("---")
            submitted = st.form_submit_button("üíæ Guardar Persona", type="primary", use_container_width=True)
            
            if submitted:
                if not label or not name:
                    st.error("‚ùå Los campos **Etiqueta** y **Nombre** son obligatorios")
                else:
                    conn = sqlite3.connect(DB_PATH)
                    c = conn.cursor()
                    try:
                        c.execute('''INSERT OR REPLACE INTO people 
                                     (label, name, email, role, threshold, notes) 
                                     VALUES (?,?,?,?,?,?)''',
                                  (label, name, email, role, threshold, notes))
                        conn.commit()
                        st.success(f"‚úÖ **{name}** ha sido guardado correctamente en el sistema")
                        st.balloons()
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Error al guardar: {e}")
                    finally:
                        conn.close()
    
    # TAB 3: ELIMINAR
    with tab3:
        st.subheader("üóëÔ∏è Eliminar Persona del Sistema")
        
        if df_people.empty:
            st.info("üì≠ No hay personas registradas para eliminar")
        else:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                del_label = st.selectbox(
                    "Selecciona la persona a eliminar",
                    ["-- Seleccionar --"] + list(df_people['label']),
                    help="Esta acci√≥n no se puede deshacer"
                )
            
            if del_label != "-- Seleccionar --":
                person = df_people[df_people['label'] == del_label].iloc[0]
                
                st.warning(f"‚ö†Ô∏è **Atenci√≥n:** Vas a eliminar a **{person['name']}** (Etiqueta: {del_label})")
                
                with st.expander("üìã Ver informaci√≥n completa"):
                    st.json({
                        "Nombre": person['name'],
                        "Email": person['email'],
                        "Rol": person['role'],
                        "Umbral": f"{person['threshold']:.0%}",
                        "Notas": person['notes']
                    })
                
                col_a, col_b, col_c = st.columns([1, 1, 1])
                with col_b:
                    if st.button("üóëÔ∏è Confirmar Eliminaci√≥n", type="secondary", use_container_width=True):
                        conn = sqlite3.connect(DB_PATH)
                        c = conn.cursor()
                        c.execute('DELETE FROM people WHERE label=?', (del_label,))
                        conn.commit()
                        conn.close()
                        st.success(f"‚úÖ **{person['name']}** ha sido eliminado del sistema")
                        st.rerun()

# ---------------------------
# P√ÅGINA: ANAL√çTICA
# ---------------------------
elif page == "üìä Dashboard Anal√≠tico":
    st.header("üìä Panel de Anal√≠tica y Estad√≠sticas")
    
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query('SELECT * FROM predictions', conn, parse_dates=['timestamp'])
    conn.close()

    if df.empty:
        st.info("üì≠ No hay predicciones registradas. Ve a **'üé• Reconocimiento en Vivo'** para empezar a recopilar datos.")
        st.image("https://via.placeholder.com/800x400/667eea/ffffff?text=Sin+Datos+Disponibles", use_container_width=True)
    else:
        # M√©tricas generales con dise√±o mejorado
        st.markdown("### üìà M√©tricas Generales del Sistema")
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric("üî¢ Total Predicciones", len(df))
        with col2:
            st.metric("üè∑Ô∏è Etiquetas √önicas", df['label'].nunique())
        with col3:
            st.metric("üìä Confianza Promedio", f"{df['confidence'].mean():.1%}")
        with col4:
            st.metric("üéØ Confianza M√°xima", f"{df['confidence'].max():.1%}")
        with col5:
            st.metric("üìâ Confianza M√≠nima", f"{df['confidence'].min():.1%}")

        st.markdown("---")
        
        # Mostrar datos completos
        with st.expander("üìã Ver Tabla Completa de Predicciones"):
            df_display = df.copy()
            df_display['confidence'] = df_display['confidence'].apply(lambda x: f"{x:.1%}")
            df_display['timestamp'] = pd.to_datetime(df_display['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
            st.dataframe(df_display, use_container_width=True, height=300)

        st.markdown("---")
        st.markdown("### üìä Visualizaciones Estad√≠sticas")

        # Configurar estilo de matplotlib
        plt.style.use('seaborn-v0_8-darkgrid')
        
        # GR√ÅFICA 1 y 2
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### 1Ô∏è‚É£ Distribuci√≥n de Reconocimientos por Persona")
            fig1, ax1 = plt.subplots(figsize=(10, 6))
            counts = df['label'].value_counts()
            colors = plt.cm.Spectral(np.linspace(0, 1, len(counts)))
            counts.plot(kind='barh', ax=ax1, color=colors)
            ax1.set_xlabel('Cantidad de Reconocimientos', fontsize=12, fontweight='bold')
            ax1.set_ylabel('Persona', fontsize=12, fontweight='bold')
            ax1.set_title('Frecuencia de Detecciones', fontsize=14, fontweight='bold', pad=20)
            ax1.grid(axis='x', alpha=0.3)
            plt.tight_layout()
            st.pyplot(fig1)

        with col2:
            st.markdown("#### 2Ô∏è‚É£ Confianza Promedio por Persona")
            fig2, ax2 = plt.subplots(figsize=(10, 6))
            avg_conf = df.groupby('label')['confidence'].mean().sort_values()
            colors2 = ['#ff6b6b' if x < 0.5 else '#ffd93d' if x < 0.8 else '#6bcf7f' for x in avg_conf]
            avg_conf.plot(kind='barh', ax=ax2, color=colors2)
            ax2.set_xlabel('Nivel de Confianza Promedio', fontsize=12, fontweight='bold')
            ax2.set_ylabel('Persona', fontsize=12, fontweight='bold')
            ax2.set_title('Precisi√≥n de Reconocimiento', fontsize=14, fontweight='bold', pad=20)
            ax2.axvline(0.5, color='red', linestyle='--', linewidth=2, alpha=0.7, label='Umbral M√≠nimo (50%)')
            ax2.axvline(0.8, color='green', linestyle='--', linewidth=2, alpha=0.7, label='Alta Confianza (80%)')
            ax2.legend(loc='lower right')
            ax2.grid(axis='x', alpha=0.3)
            plt.tight_layout()
            st.pyplot(fig2)

        # GR√ÅFICA 3 y 4
        col3, col4 = st.columns(2)
        
        with col3:
            st.markdown("#### 3Ô∏è‚É£ Histograma de Distribuci√≥n de Confianza")
            fig3, ax3 = plt.subplots(figsize=(10, 6))
            n, bins, patches = ax3.hist(df['confidence'], bins=25, edgecolor='black', alpha=0.8)
            
            # Colorear barras seg√∫n el rango
            for i, patch in enumerate(patches):
                if bins[i] < 0.5:
                    patch.set_facecolor('#ff6b6b')
                elif bins[i] < 0.8:
                    patch.set_facecolor('#ffd93d')
                else:
                    patch.set_facecolor('#6bcf7f')
            
            ax3.set_xlabel('Nivel de Confianza', fontsize=12, fontweight='bold')
            ax3.set_ylabel('Frecuencia', fontsize=12, fontweight='bold')
            ax3.set_title('Distribuci√≥n de Precisi√≥n del Modelo', fontsize=14, fontweight='bold', pad=20)
            ax3.axvline(0.5, color='red', linestyle='--', linewidth=2, label='Umbral 50%')
            ax3.axvline(df['confidence'].mean(), color='blue', linestyle='-', linewidth=2, label=f'Promedio ({df["confidence"].mean():.1%})')
            ax3.legend()
            ax3.grid(axis='y', alpha=0.3)
            plt.tight_layout()
            st.pyplot(fig3)

        with col4:
            st.markdown("#### 4Ô∏è‚É£ Timeline de Reconocimientos")
            df['date'] = pd.to_datetime(df['timestamp']).dt.date
            series = df.groupby('date').size()
            
            fig4, ax4 = plt.subplots(figsize=(10, 6))
            series.plot(ax=ax4, marker='o', color='#667eea', linewidth=3, markersize=8)
            ax4.fill_between(series.index, series.values, alpha=0.3, color='#667eea')
            ax4.set_ylabel('N√∫mero de Reconocimientos', fontsize=12, fontweight='bold')
            ax4.set_xlabel('Fecha', fontsize=12, fontweight='bold')
            ax4.set_title('Evoluci√≥n Temporal de Detecciones', fontsize=14, fontweight='bold', pad=20)
            ax4.grid(True, alpha=0.3)
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            st.pyplot(fig4)

        # GR√ÅFICA 5
        st.markdown("#### 5Ô∏è‚É£ Patr√≥n de Reconocimientos por Hora del D√≠a")
        df['hour'] = pd.to_datetime(df['timestamp']).dt.hour
        hour_counts = df.groupby('hour').size().reindex(range(24), fill_value=0)
        
        fig5, ax5 = plt.subplots(figsize=(14, 5))
        colors5 = plt.cm.viridis(hour_counts / hour_counts.max())
        bars = ax5.bar(hour_counts.index, hour_counts.values, color=colors5, edgecolor='black', linewidth=1.5)
        
        # Agregar valores en las barras
        for bar in bars:
            height = bar.get_height()
            if height > 0:
                ax5.text(bar.get_x() + bar.get_width()/2., height,
                        f'{int(height)}',
                        ha='center', va='bottom', fontweight='bold', fontsize=10)
        
        ax5.set_ylabel('Cantidad de Reconocimientos', fontsize=12, fontweight='bold')
        ax5.set_xlabel('Hora del D√≠a (24h)', fontsize=12, fontweight='bold')
        ax5.set_title('Actividad por Hora - Identificaci√≥n de Patrones Temporales', fontsize=14, fontweight='bold', pad=20)
        ax5.set_xticks(range(24))
        ax5.set_xticklabels([f'{h:02d}:00' for h in range(24)], rotation=45, ha='right')
        ax5.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        st.pyplot(fig5)

        # An√°lisis adicional
        st.markdown("---")
        st.markdown("### üìà An√°lisis Detallado")
        
        col_a, col_b, col_c = st.columns(3)
        
        with col_a:
            st.markdown("#### üèÜ Persona M√°s Detectada")
            top_person = df['label'].value_counts().idxmax()
            top_count = df['label'].value_counts().max()
            st.success(f"**{top_person}**")
            st.metric("Detecciones", top_count)
        
        with col_b:
            st.markdown("#### ‚≠ê Mayor Confianza Promedio")
            best_conf = df.groupby('label')['confidence'].mean().idxmax()
            best_conf_val = df.groupby('label')['confidence'].mean().max()
            st.success(f"**{best_conf}**")
            st.metric("Confianza", f"{best_conf_val:.1%}")
        
        with col_c:
            st.markdown("#### üïê Hora M√°s Activa")
            peak_hour = hour_counts.idxmax()
            peak_count = hour_counts.max()
            st.success(f"**{peak_hour:02d}:00**")
            st.metric("Reconocimientos", peak_count)

        # Exportar gr√°ficas
        st.markdown("---")
        st.markdown("### üì¶ Exportaci√≥n de Visualizaciones")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üì¶ Descargar Todas las Gr√°ficas (ZIP)", type="primary", use_container_width=True):
                zip_buf = io.BytesIO()
                with zipfile.ZipFile(zip_buf, 'w') as zf:
                    for i, fig in enumerate([fig1, fig2, fig3, fig4, fig5], start=1):
                        img_bytes = io.BytesIO()
                        fig.savefig(img_bytes, format='png', dpi=300, bbox_inches='tight')
                        img_bytes.seek(0)
                        zf.writestr(f'grafica_{i}_reconocimiento.png', img_bytes.read())
                
                zip_buf.seek(0)
                st.download_button(
                    label="‚¨áÔ∏è Descargar ZIP con Gr√°ficas",
                    data=zip_buf,
                    file_name=f"analisis_reconocimiento_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                    mime="application/zip",
                    use_container_width=True
                )

# ---------------------------
# P√ÅGINA: EXPORTAR
# ---------------------------
elif page == "üì• Exportaci√≥n de Datos":
    st.header("üì• Exportaci√≥n y Generaci√≥n de Reportes")
    
    conn = sqlite3.connect(DB_PATH)
    df_pred = pd.read_sql_query('SELECT * FROM predictions', conn)
    df_people = pd.read_sql_query('SELECT * FROM people', conn)
    conn.close()

    st.markdown("### üìä Datos Disponibles para Exportar")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìà Base de Predicciones")
        if df_pred.empty:
            st.info("üì≠ Sin datos de predicciones")
        else:
            st.metric("Total de Registros", len(df_pred))
            st.metric("D√≠as con Actividad", f"{df_pred['timestamp'].nunique()} d√≠as")
            
            # Vista previa
            with st.expander("üëÅÔ∏è Vista Previa de Datos"):
                st.dataframe(df_pred.head(10), use_container_width=True)
            
            # Formatear datos
            df_export = df_pred.copy()
            df_export['confidence'] = df_export['confidence'].apply(lambda x: f"{x:.2%}")
            df_export['timestamp'] = pd.to_datetime(df_export['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
            
            csv = df_export.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="‚¨áÔ∏è Descargar Predicciones (CSV)",
                data=csv,
                file_name=f"predictions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                type="primary",
                use_container_width=True
            )
    
    with col2:
        st.markdown("#### üë• Base de Personas")
        if df_people.empty:
            st.info("üì≠ Sin datos de personas")
        else:
            st.metric("Total de Personas", len(df_people))
            st.metric("Etiquetas Registradas", df_people['label'].nunique())
            
            # Vista previa
            with st.expander("üëÅÔ∏è Vista Previa de Datos"):
                st.dataframe(df_people, use_container_width=True)
            
            # Formatear datos
            df_people_export = df_people.copy()
            df_people_export['threshold'] = df_people_export['threshold'].apply(lambda x: f"{x:.0%}")
            
            csv_p = df_people_export.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="‚¨áÔ∏è Descargar Personas (CSV)",
                data=csv_p,
                file_name=f"people_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                type="primary",
                use_container_width=True
            )

    st.markdown("---")

# ---------------------------
# FOOTER PERSONALIZADO
# ---------------------------
st.markdown("---")
st.markdown("""
<div class='footer'>
    <strong>üéì Sistema de Reconocimiento Facial Inteligente</strong><br>
    Elaborado por: <strong>Joel Pesantez</strong> y <strong>Maura Calle</strong> | 
    Powered by Teachable Machine & Streamlit | 
    ¬© 2024
</div>
""", unsafe_allow_html=True)

# Espacio para el footer
st.markdown("<br><br>", unsafe_allow_html=True)